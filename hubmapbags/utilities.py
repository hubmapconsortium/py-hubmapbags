from shutil import rmtree
from pathlib import Path
import pandas as pd
from tabulate import tabulate
import os

def __get_token(token: str) -> str:
    """
    Helper method that gets the HuBMAP services token.
    """

    if token is None:
        token = os.getenv("TOKEN")

    return token


def add_empty_duuid_column(file: str) -> bool:
    """
    Helper method that adds the UUID column of a backup pickle file.

    :param file: A pickle file
    :type file: string
    :rtype: boolean
    """

    try:
        duuid = file.split("_")[-1].split(".")[0]
        print(file)

        df = pd.read_pickle(file)
        df["duuid"] = duuid
        df.to_pickle(file)
        return True
    except:
        return False


def reset_hubmap_uuid_column(file: str) -> bool:
    """
    Helper method that resets the UUID column of a backup pickle file.

    :param file: A pickle file
    :type file: string
    :rtype: boolean
    """

    try:
        df = pd.read_pickle(file)
        df["hubmap_uuid"] = None
        df.to_pickle(file)
        return True
    except:
        return False


def add_empty_dbgap_study_id_column(file: str) -> bool:
    """
    Helper function that adds a dbGaP study ID column to a backup pickle file.

    :param file: A pickle file
    :type file: string
    :rtype: boolean
    """

    try:
        duuid = file.split("_")[-1].split(".")[0]
        print(file)

        df = pd.read_pickle(file)
        df["dbgap_study_id"] = None
        df.to_pickle(file)
        return True
    except:
        return False


def pprint(message: str) -> None:
    """
    Helper method that pretty prints a string.

    :param file: A message
    :type file: string
    """

    table = [[message]]
    output = tabulate(table, tablefmt="grid")
    print(f"\n{output}")


def clean():
    """
    Helper method that erases files generated by this package.
    """

    directories = [".datasets", ".provenance"]
    for directory in directories:
        if Path(directory).exists():
            rmtree(directory)
